abline(a = 1, b = 0.75, col = "#FF883477")
dat <- read.csv('Advertising.csv', row.names = 1)
dat <- read.csv('Advertising.csv', row.names = 1)
ls()
getwd()
setwd("/Users/Abigail/lab_simple_regression")
setwd("/Users/Abigail/lab_simple_regression")
dat <- read.csv('Advertising.csv', row.names = 1)
dat <- read.csv('Advertising.csv', row.names = 1)
setwd("/Users/Abigail/lab_simple_regression")
setwd("/Users/Abigail/lab_simple_regression")
getwd()
setwd("/Users/Abigail")
ls()
setwd("/Users/Abigail/Documents")
setwd("/Users/Abigail/")
setwd("/Users/Abigail/lab-simple-regression")
getwd
getwd()
dat <- read.csv('Advertising.csv', row.names = 1)
dat <- read.csv('Advertising.csv', row.names = 1)
hist(dat$TV)
boxplot(dat$TV)
hist(dat$Sales)
boxplot(dat$Sales)
hist(dat$TV)
head(data)
summary(dat)
str(dat)
plot(dat$TV, dat$Sales, main = "Scatterplot of TV spending against Sales")
cor(dat$TV, dat$Sales)
plot.new()
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 2, las = 1)
axis(side = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
abline(a = results$slope, b = results$intercept, col = "#FF883477")
results$intercept
results <- info_points(p1, p2)
results$intercept
# your find_slope() function
find_slope <- function(p1, p2) {
slope = (p2[2]-p1[2])/(p2[1] - p2[1])
return(slope)
}
results <- info_points(p1,p2)
results$slope
p1
p2
find_slope(p1, p2)
p2[2]-p1[2])
p2[2]-p1[2]
p2[1] - p2[1]
p2[1]
find_slope <- function(p1, p2) {
slope = (p2[2]-p1[2])/(p2[1] - p1[1])
return(slope)
}
find_slope(p1, p2)
find_intercept(p1, p2)
find_intercept <- function(p1, p2) {
slope = find_slope(p1, p2)
intercept = p1[2] - slope*p1[1]
return(intercept)
}
find_intercept(p1, p2)
p1 <- c(-3, 1)
p2 <- c(1, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
abline(a = results$slope, b = results$intercept, col = "#FF883477")
results$intercept
p1
p2
find_slope(p1, p2)
p2[2]-p1[2]
p2[1] - p1[1]
p1[2]
- slope*p1[1]
slope = find_slope(p1, p2)
- slope*p1[1]
find_intercept <- function(p1, p2) {
slope = find_slope(p1, p2)
intercept = p1[2] - slope*p1[1]
return(intercept)
}
find_intercept(p1, p2)
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(1, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$slope, b = results$intercept, col = "#FF883477")
title(main = expression(paste(y, ' = ', toString(results$slope) * x, ' + ',  toString(results$intercept) )))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$slope, b = results$intercept, col = "#FF883477")
title(main = expression(paste(y, ' = ', toString(results$slope) * x, ' + ',  toString(results$intercept) )))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$slope, b = results$intercept, col = "#FF883477")
title(main = expression(paste(y, ' = ', toString(results$slope) * x, ' + ',  toString(results$intercept) )))
results$slope
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$slope*x, b = results$intercept, col = "#FF883477")
title(main = expression(paste(y, ' = ', toString(results$slope) * x, ' + ',  toString(results$intercept) )))
results$intercept
# change these points and pass them to info_points()
p1 <- c(-2, 4)
p2 <- c(1, 2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(-1/2, 3, cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = 8/3, b = -2/3, col = "#FF883477", lwd = 3)
title(main = expression(paste(y, ' = ', (-2/3) * x, ' + ', (8/3))))
p1 <- c(-2, 4)
p2 <- c(1, 2)
results <- find_info(p1, p2)
results <- info_points(p1, p2)
info_points$slope
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
p1 <- c(-2, 4)
p2 <- c(1, 2)
results <- info_points(p1, p2)
results
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', toString(results$slope) * x, ' + ',  toString(results$intercept) )))
title(main = expression(paste(y, ' = ', results$slope * x, ' + ',  results$intercept)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', results$slope * x, ' + ',  results$intercept)))
?title
?paste
results$slope
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 2)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 1 * x, ' + ',  0)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', results$slope * x, ' + ',  results$intercept)))
paste(y, ' = ', results$slope * x, ' + ',  results$intercept)
expression(paste(y, ' = ', results$slope * x, ' + ',  results$intercept))
expression(paste(y, ' = ', results$slope * x, ' + ',  results$intercept))
?expression
results$intercept
results$slope
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
results$midpoint
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(0, 5))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(-3, 3), ylim = c(-4, 4))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(0, 3), ylim = c(-4, 4))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
# change these points and pass them to info_points()
p1 <- c(1, 1)
p2 <- c(2, 4)
results <- info_points(p1, p2)
plot.new()
# depending on your chosen points you may have to set different limits
plot.window(xlim = c(0, 3), ylim = c(-4, 6))
axis(side = 1)
axis(side = 2, las = 1)
points(p1[1], p1[2], cex = 1.5, col = "#FF8834", pch = 19)
points(p2[1], p2[2], cex = 1.5, col = "#FF8834", pch = 19)
# midpoint (here you should use the midpoint outputs of your function)
points(results$midpoint[1], results$midpoint[2], cex = 1.5, pch = "x", col = "#E16868")
# slope and intercept (here you should use the outputs of your function)
abline(a = results$intercept, b = results$slope, col = "#FF883477")
title(main = expression(paste(y, ' = ', 3 * x, ' + ',  -2)))
1:3^2
(1:5)*2
dat <- read.csv('Advertising.csv', row.names = 1)
set_wd("/Users/Abigail/Documents/stat159-fall2016-hw02")
get_wd()
getwd()
setwd("/Users/Abigail/Documents/stat159-fall2016-hw02")
getwd()
dat <- read.csv('../data/Advertising.csv', row.names = 1)
ls()
getwd()
setwd("/Users/Abigail/Documents/stat159-fall2016-hw02/code")
dat <- read.csv('../data/Advertising.csv', row.names = 1)
dat
summary(data)
sink("../data/eda-output.txt")
summary(data)
dev.off
sink("TVhist.png")
hist(dat$TV)
sink("TVhist.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("TVhist.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("Saleshist.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("Saleshist.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
fit <- lm(Sales ~ TV, data = data)
typeof(data)
setwd("/Users/Abigail/Documents/stat159-fall2016-hw02/code")
typeof(data)
fit <- lm(Sales ~ TV, data = dat)
plot(fit)
plot(fit)
plot(Sales ~ TV, data= dat)
plot(Sales ~ TV, data= dat, col="red")
plot(Sales ~ TV, data= dat)
abline(fit, col="red")
abline(fit, col="blue")
plot(Sales ~ TV, data= dat, main= "Regression of TV on Sales", col="red")
abline(fit, col="blue")
sink("../data/regression.Rdata")
fit
summary(fit)
# scatterplot and fit line
sink("../images/scatterplot-tv-sales.png")
plot(Sales ~ TV, data= dat, main= "Regression of TV on Sales", col="red")
abline(fit, col="blue")
sink("../images/scatterplot-tv-sales.pdf")
plot(Sales ~ TV, data= dat, main= "Regression of TV on Sales", col="red")
abline(fit, col="blue")
sink("../images/histogram-tv.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-tv.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sale.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
dev.off
save(fit, summary(fit), file="regression.Rdata")
summ <- summary(fit)
save(fit, summ, file="regression.Rdata")
save(fit, summ, file="../data/regression.Rdata")
summary(data)
summary(data)
source('~/Documents/stat159-fall2016-hw02/code/eda-script.R')
# Read Advertising Data set from /data
dat <- read.csv('../data/Advertising.csv', row.names = 1)
# Compute summary statistics and write to eda-output.txt
sink("../data/eda-output.txt")
summary(data)
# Compute histograms for Sales and TV and write to png/pdf formats
sink("../images/histogram-tv.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-tv.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
# Close sink
dev.off
dev.off
# Read Advertising Data set from /data
dat <- read.csv('../data/Advertising.csv', row.names = 1)
# Compute summary statistics and write to eda-output.txt
sink("../data/eda-output.txt")
summary(data)
# Compute histograms for Sales and TV and write to png/pdf formats
sink("../images/histogram-tv.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-tv.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
# Close sink
dev.off
dev.off
dat <- read.csv('../data/Advertising.csv', row.names = 1)
sink("../data/eda-output.txt")
sink()
sink("../data/eda-output.txt")
summary(data)
warnings()
summary(data)
dev.off()
sink()
sink("../data/eda-output.txt")
summary(data)
sink("../images/histogram-tv.png")
dev.off()
dev.off
sink("../images/histogram-tv.png")
sink()
sink("../images/histogram-tv.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink("../images/histogram-tv.pdf")
dev.off
sink()
sink("../images/histogram-tv.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink()
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.png")
sink()
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink("../images/histogram-sales.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink()
dev.off
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
plots <- list.files("images/")
plots
plots <- list.files("../images/")
plots
getwd()
setwd("/Users/Abigail/Documents/stat159-fall2016-hw02")
getwd()
getwd()
list.files("../images/")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
images <- list.files("../images/")
images
getwd()
sink()
sink("../images/histogram-tv.png")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink()
sink("../images/histogram-tv.pdf")
hist(dat$TV, main = "TV Histogram", xlab = "Dollars spent")
sink()
sink("../images/histogram-sales.pdf")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
sink()
sink("../images/histogram-sales.png")
hist(dat$Sales, main="Sales Histogram", xlab = "Dollars spent")
getwd()
